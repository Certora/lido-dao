--- ../contracts/0.8.9/StakingRouter.sol	2023-02-21 19:22:19.765997500 +0200
+++ 	2023-02-22 09:45:59.772086200 +0200
@@ -4,18 +4,18 @@
 /* See contracts/COMPILERS.md */
 pragma solidity 0.8.9;
 
-import {AccessControlEnumerable} from "./utils/access/AccessControlEnumerable.sol";
+import {AccessControlEnumerable} from "../../contracts/0.8.9/utils/access/AccessControlEnumerable.sol";
 
-import {IStakingModule} from "./interfaces/IStakingModule.sol";
+import {IStakingModule} from "../../contracts/0.8.9/interfaces/IStakingModule.sol";
 
-import {Math256} from "../common/lib/Math256.sol";
-import {UnstructuredStorage} from "./lib/UnstructuredStorage.sol";
-import {MinFirstAllocationStrategy} from "../common/lib/MinFirstAllocationStrategy.sol";
+import {Math256} from "../../contracts/common/lib/Math256.sol";
+import {UnstructuredStorage} from "../../contracts/0.8.9/lib/UnstructuredStorage.sol";
+import {MinFirstAllocationStrategy} from "../../contracts/common/lib/MinFirstAllocationStrategy.sol";
 
-import {BeaconChainDepositor} from "./BeaconChainDepositor.sol";
-import {Versioned} from "./utils/Versioned.sol";
+import {BeaconChainDepositorHarness} from "../helpers/BeaconChainDepositor.sol";
+import {Versioned} from "../../contracts/0.8.9/utils/Versioned.sol";
 
-contract StakingRouter is AccessControlEnumerable, BeaconChainDepositor, Versioned {
+contract StakingRouter is AccessControlEnumerable, BeaconChainDepositorHarness, Versioned {
     using UnstructuredStorage for bytes32;
 
     /// @dev events
@@ -125,7 +125,7 @@
         _;
     }
 
-    constructor(address _depositContract) BeaconChainDepositor(_depositContract) {}
+    constructor(address _depositContract) BeaconChainDepositorHarness(_depositContract) {}
 
     /**
      * @dev proxy initialization
@@ -133,7 +133,7 @@
      * @param _lido Lido address
      * @param _withdrawalCredentials Lido withdrawal vault contract address
      */
-    function initialize(address _admin, address _lido, bytes32 _withdrawalCredentials) external {
+    function initialize(address _admin, address _lido, bytes32 _withdrawalCredentials) public {
         if (_admin == address(0)) revert ZeroAddress("_admin");
         if (_lido == address(0)) revert ZeroAddress("_lido");
 
@@ -903,7 +903,10 @@
         // sanity check
         if (totalFee >= precisionPoints) revert ValueOver100Percent("totalFee");
 
+        /// @notice Certora: restrict the count to avoid the assembly block below.
+        require(rewardedStakingModulesCount >= stakingModulesCount);
         /// @dev shrink arrays
+        /*
         if (rewardedStakingModulesCount < stakingModulesCount) {
             uint256 trim = stakingModulesCount - rewardedStakingModulesCount;
             assembly {
@@ -911,6 +914,7 @@
                 mstore(stakingModuleFees, sub(mload(stakingModuleFees), trim))
             }
         }
+        */
     }
 
     /// @notice Helper for Lido contract (DEPRECATED)
--- ../contracts/0.8.9/BeaconChainDepositor.sol	2023-02-21 19:22:19.762969600 +0200
+++ 	2023-02-21 19:59:28.209410200 +0200
@@ -4,7 +4,7 @@
 // See contracts/COMPILERS.md
 pragma solidity 0.8.9;
 
-import {MemUtils} from "../common/lib/MemUtils.sol";
+import {MemUtils} from "../../contracts/common/lib/MemUtils.sol";
 
 interface IDepositContract {
     function get_deposit_root() external view returns (bytes32 rootHash);
@@ -43,7 +43,8 @@
         bytes memory _withdrawalCredentials,
         bytes memory _publicKeysBatch,
         bytes memory _signaturesBatch
-    ) internal {
+    ) internal virtual {
+        /*
         if (_publicKeysBatch.length != PUBLIC_KEY_LENGTH * _keysCount) {
             revert InvalidPublicKeysBatchLength(_publicKeysBatch.length, PUBLIC_KEY_LENGTH * _keysCount);
         }
@@ -66,6 +67,7 @@
                 ++i;
             }
         }
+        */
     }
 
     /// @dev computes the deposit_root_hash required by official Beacon Deposit contract
--- ../contracts/0.4.24/nos/NodeOperatorsRegistry.sol	2023-02-21 19:22:19.750923800 +0200
+++ 	2023-02-22 20:39:55.224205000 +0200
@@ -9,13 +9,13 @@
 import {SafeMath64} from "@aragon/os/contracts/lib/math/SafeMath64.sol";
 import {UnstructuredStorage} from "@aragon/os/contracts/common/UnstructuredStorage.sol";
 
-import {Math256} from "../../common/lib/Math256.sol";
-import {MinFirstAllocationStrategy} from "../../common/lib/MinFirstAllocationStrategy.sol";
-import {ILidoLocator} from "../../common/interfaces/ILidoLocator.sol";
-import {IBurner} from "../../common/interfaces/IBurner.sol";
-import {SigningKeys} from "../lib/SigningKeys.sol";
-import {Packed64x4} from "../lib/Packed64x4.sol";
-import {Versioned} from "../utils/Versioned.sol";
+import {Math256} from "../../contracts/common/lib/Math256.sol";
+import {MinFirstAllocationStrategy} from "../../contracts/common/lib/MinFirstAllocationStrategy.sol";
+import {ILidoLocator} from "../../contracts/common/interfaces/ILidoLocator.sol";
+import {IBurner} from "../../contracts/common/interfaces/IBurner.sol";
+import {SigningKeys} from "./SigningKeys.sol";
+import {Packed64x4} from "../../contracts/0.4.24/lib/Packed64x4.sol";
+import {Versioned} from "../../contracts/0.4.24/utils/Versioned.sol";
 
 interface IStETH {
     function sharesOf(address _account) external view returns (uint256);
@@ -811,6 +811,9 @@
         if (activeNodeOperatorIndex == 0) return (0, new uint256[](0), new uint256[](0));
 
         /// @dev shrink the length of the resulting arrays if some active node operators have no available keys to be deposited
+        /// @notice Certora: restrict the count to avoid the assembly block below.
+        require(activeNodeOperatorIndex >= activeNodeOperatorsCount);
+        /*
         if (activeNodeOperatorIndex < activeNodeOperatorsCount) {
             assembly {
                 mstore(nodeOperatorIds, activeNodeOperatorIndex)
@@ -818,6 +821,7 @@
                 mstore(activeKeysCapacities, activeNodeOperatorIndex)
             }
         }
+        */
 
         allocatedKeysCount =
             MinFirstAllocationStrategy.allocate(activeKeyCountsAfterAllocation, activeKeysCapacities, uint64(_keysCount));
@@ -1097,23 +1101,26 @@
         view
         returns (bytes key, bytes depositSignature, bool used)
     {
+        /*
         bool[] memory keyUses;
         (key, depositSignature, keyUses) = getSigningKeys(_nodeOperatorId, _index, 1);
         used = keyUses[0];
+        */
     }
 
     /// @notice Returns n signing keys of the node operator #`_nodeOperatorId`
     /// @param _nodeOperatorId Node Operator id
-    /// @param _offset Offset of the key, starting with 0
+    /// @param offset Offset of the key, starting with 0
     /// @param _limit Number of keys to return
     /// @return pubkeys Keys concatenated into the bytes batch
     /// @return signatures Signatures concatenated into the bytes batch needed for a deposit_contract.deposit call
     /// @return used Array of flags indicated if the key was used in the staking
-    function getSigningKeys(uint256 _nodeOperatorId, uint256 _offset, uint256 _limit)
+    function getSigningKeys(uint256 _nodeOperatorId, uint256 offset, uint256 _limit)
         public
         view
         returns (bytes memory pubkeys, bytes memory signatures, bool[] memory used)
     {
+        /*
         _onlyExistedNodeOperator(_nodeOperatorId);
 
         Packed64x4.Packed memory signingKeysStats = _loadOperatorSigningKeysStats(_nodeOperatorId);
@@ -1127,6 +1134,7 @@
         for (uint256 i; i < _limit; ++i) {
             used[i] = (_offset + i) < depositedSigningKeysCount;
         }
+        */
     }
 
     /// @notice Returns the type of the staking module
@@ -1135,7 +1143,7 @@
     }
 
     function getStakingModuleSummary()
-        external
+        public
         view
         returns (uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount)
     {
@@ -1146,7 +1154,7 @@
     }
 
     function getNodeOperatorSummary(uint256 _nodeOperatorId)
-        external
+        public
         view
         returns (
             bool isTargetLimitActive,
