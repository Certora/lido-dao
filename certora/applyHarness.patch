--- ../contracts/0.8.9/StakingRouter.sol	2023-02-07 12:36:41.804965100 +0200
+++ 	2023-02-08 11:59:46.503710900 +0200
@@ -5,23 +5,23 @@
 /* See contracts/COMPILERS.md */
 pragma solidity 0.8.9;
 
-import {AccessControlEnumerable} from "./utils/access/AccessControlEnumerable.sol";
+import {AccessControlEnumerable} from "../../contracts/0.8.9/utils/access/AccessControlEnumerable.sol";
 
-import {IStakingModule} from "./interfaces/IStakingModule.sol";
+import {IStakingModule} from "../../contracts/0.8.9/interfaces/IStakingModule.sol";
 
-import {Math256} from "../common/lib/Math256.sol";
-import {UnstructuredStorage} from "./lib/UnstructuredStorage.sol";
-import {MinFirstAllocationStrategy} from "../common/lib/MinFirstAllocationStrategy.sol";
+import {Math256} from "../../contracts/common/lib/Math256.sol";
+import {UnstructuredStorage} from "../../contracts/0.8.9/lib/UnstructuredStorage.sol";
+import {MinFirstAllocationStrategy} from "../../contracts/common/lib/MinFirstAllocationStrategy.sol";
 
-import {BeaconChainDepositor} from "./BeaconChainDepositor.sol";
-import {Versioned} from "./utils/Versioned.sol";
+import {BeaconChainDepositorHarness} from "../helpers/BeaconChainDepositor.sol";
+import {Versioned} from "../../contracts/0.8.9/utils/Versioned.sol";
 
 interface ILido {
     function getDepositableEther() external view returns (uint256);
     function receiveStakingRouterDepositRemainder() external payable;
 }
 
-contract StakingRouter is AccessControlEnumerable, BeaconChainDepositor, Versioned {
+contract StakingRouter is AccessControlEnumerable, BeaconChainDepositorHarness, Versioned {
     using UnstructuredStorage for bytes32;
 
     /// @dev events
@@ -128,7 +128,7 @@
         _;
     }
 
-    constructor(address _depositContract) BeaconChainDepositor(_depositContract) {}
+    constructor(address _depositContract) BeaconChainDepositorHarness(_depositContract) {}
 
     /**
      * @dev proxy initialization
@@ -136,7 +136,7 @@
      * @param _lido Lido address
      * @param _withdrawalCredentials Lido withdrawal vault contract address
      */
-    function initialize(address _admin, address _lido, bytes32 _withdrawalCredentials) external {
+    function initialize(address _admin, address _lido, bytes32 _withdrawalCredentials) public {
         if (_admin == address(0)) revert ZeroAddress("_admin");
         if (_lido == address(0)) revert ZeroAddress("_lido");
 
@@ -932,7 +932,10 @@
         // sanity check
         if (totalFee >= precisionPoints) revert ValueOver100Percent("totalFee");
 
+        /// @notice Certora: restrict the count to avoid the assembly block below.
+        require(rewardedStakingModulesCount >= stakingModulesCount);
         /// @dev shrink arrays
+        /*
         if (rewardedStakingModulesCount < stakingModulesCount) {
             uint256 trim = stakingModulesCount - rewardedStakingModulesCount;
             assembly {
@@ -940,6 +943,7 @@
                 mstore(stakingModuleFees, sub(mload(stakingModuleFees), trim))
             }
         }
+        */
     }
 
     /// @notice Helper for Lido contract (DEPRECATED)
--- ../contracts/0.8.9/BeaconChainDepositor.sol	2023-02-14 08:59:54.247838500 +0200
+++ 	2023-02-14 09:39:23.855343900 +0200
@@ -4,7 +4,7 @@
 // See contracts/COMPILERS.md
 pragma solidity 0.8.9;
 
-import {MemUtils} from "../common/lib/MemUtils.sol";
+import {MemUtils} from "../../contracts/common/lib/MemUtils.sol";
 
 interface IDepositContract {
     function get_deposit_root() external view returns (bytes32 rootHash);
@@ -43,7 +43,8 @@
         bytes memory _withdrawalCredentials,
         bytes memory _publicKeysBatch,
         bytes memory _signaturesBatch
-    ) internal {
+    ) internal virtual {
+        /*
         require(_publicKeysBatch.length == PUBLIC_KEY_LENGTH * _keysCount, "INVALID_PUBLIC_KEYS_BATCH_LENGTH");
         require(_signaturesBatch.length == SIGNATURE_LENGTH * _keysCount, "INVALID_SIGNATURES_BATCH_LENGTH");
 
@@ -66,6 +67,7 @@
         }
 
         if (address(this).balance != targetBalance) revert NotExpectedBalance();
+        */
     }
 
     /// @dev computes the deposit_root_hash required by official Beacon Deposit contract
