--- ../contracts/0.8.9/StakingRouter.sol	2023-02-14 08:59:54.251839900 +0200
+++ 	2023-02-16 17:06:45.583614300 +0200
@@ -4,23 +4,23 @@
 /* See contracts/COMPILERS.md */
 pragma solidity 0.8.9;
 
-import {AccessControlEnumerable} from "./utils/access/AccessControlEnumerable.sol";
+import {AccessControlEnumerable} from "../../contracts/0.8.9/utils/access/AccessControlEnumerable.sol";
 
-import {IStakingModule} from "./interfaces/IStakingModule.sol";
+import {IStakingModule} from "../../contracts/0.8.9/interfaces/IStakingModule.sol";
 
-import {Math256} from "../common/lib/Math256.sol";
-import {UnstructuredStorage} from "./lib/UnstructuredStorage.sol";
-import {MinFirstAllocationStrategy} from "../common/lib/MinFirstAllocationStrategy.sol";
+import {Math256} from "../../contracts/common/lib/Math256.sol";
+import {UnstructuredStorage} from "../../contracts/0.8.9/lib/UnstructuredStorage.sol";
+import {MinFirstAllocationStrategy} from "../../contracts/common/lib/MinFirstAllocationStrategy.sol";
 
-import {BeaconChainDepositor} from "./BeaconChainDepositor.sol";
-import {Versioned} from "./utils/Versioned.sol";
+import {BeaconChainDepositorHarness} from "../helpers/BeaconChainDepositor.sol";
+import {Versioned} from "../../contracts/0.8.9/utils/Versioned.sol";
 
 interface ILido {
     function getDepositableEther() external view returns (uint256);
     function receiveStakingRouterDepositRemainder() external payable;
 }
 
-contract StakingRouter is AccessControlEnumerable, BeaconChainDepositor, Versioned {
+contract StakingRouter is AccessControlEnumerable, BeaconChainDepositorHarness, Versioned {
     using UnstructuredStorage for bytes32;
 
     /// @dev events
@@ -128,7 +128,7 @@
         _;
     }
 
-    constructor(address _depositContract) BeaconChainDepositor(_depositContract) {}
+    constructor(address _depositContract) BeaconChainDepositorHarness(_depositContract) {}
 
     /**
      * @dev proxy initialization
@@ -136,7 +136,7 @@
      * @param _lido Lido address
      * @param _withdrawalCredentials Lido withdrawal vault contract address
      */
-    function initialize(address _admin, address _lido, bytes32 _withdrawalCredentials) external {
+    function initialize(address _admin, address _lido, bytes32 _withdrawalCredentials) public {
         if (_admin == address(0)) revert ZeroAddress("_admin");
         if (_lido == address(0)) revert ZeroAddress("_lido");
 
@@ -932,7 +932,10 @@
         // sanity check
         if (totalFee >= precisionPoints) revert ValueOver100Percent("totalFee");
 
+        /// @notice Certora: restrict the count to avoid the assembly block below.
+        require(rewardedStakingModulesCount >= stakingModulesCount);
         /// @dev shrink arrays
+        /*
         if (rewardedStakingModulesCount < stakingModulesCount) {
             uint256 trim = stakingModulesCount - rewardedStakingModulesCount;
             assembly {
@@ -940,6 +943,7 @@
                 mstore(stakingModuleFees, sub(mload(stakingModuleFees), trim))
             }
         }
+        */
     }
 
     /// @notice Helper for Lido contract (DEPRECATED)
--- ../contracts/0.8.9/BeaconChainDepositor.sol	2023-02-14 08:59:54.247838500 +0200
+++ 	2023-02-14 09:39:23.855343900 +0200
@@ -4,7 +4,7 @@
 // See contracts/COMPILERS.md
 pragma solidity 0.8.9;
 
-import {MemUtils} from "../common/lib/MemUtils.sol";
+import {MemUtils} from "../../contracts/common/lib/MemUtils.sol";
 
 interface IDepositContract {
     function get_deposit_root() external view returns (bytes32 rootHash);
@@ -43,7 +43,8 @@
         bytes memory _withdrawalCredentials,
         bytes memory _publicKeysBatch,
         bytes memory _signaturesBatch
-    ) internal {
+    ) internal virtual {
+        /*
         require(_publicKeysBatch.length == PUBLIC_KEY_LENGTH * _keysCount, "INVALID_PUBLIC_KEYS_BATCH_LENGTH");
         require(_signaturesBatch.length == SIGNATURE_LENGTH * _keysCount, "INVALID_SIGNATURES_BATCH_LENGTH");
 
@@ -66,6 +67,7 @@
         }
 
         if (address(this).balance != targetBalance) revert NotExpectedBalance();
+        */
     }
 
     /// @dev computes the deposit_root_hash required by official Beacon Deposit contract
--- ../contracts/0.4.24/nos/NodeOperatorsRegistry.sol	2023-02-14 15:15:48.017349700 +0200
+++ 	2023-02-16 11:38:30.562026700 +0200
@@ -9,15 +9,15 @@
 import {SafeMath64} from "@aragon/os/contracts/lib/math/SafeMath64.sol";
 import {UnstructuredStorage} from "@aragon/os/contracts/common/UnstructuredStorage.sol";
 
-import {Math64} from "../lib/Math64.sol";
-import {Math256} from "../../common/lib/Math256.sol";
-import {MemUtils} from "../../common/lib/MemUtils.sol";
-import {MinFirstAllocationStrategy} from "../../common/lib/MinFirstAllocationStrategy.sol";
-import {ILidoLocator} from "../../common/interfaces/ILidoLocator.sol";
-import {IBurner} from "../../common/interfaces/IBurner.sol";
-import {SigningKeys} from "../lib/SigningKeys.sol";
-import {Packed64x4} from "../lib/Packed64x4.sol";
-import {Versioned} from "../utils/Versioned.sol";
+import {Math64} from "../../contracts/0.4.24/lib/Math64.sol";
+import {Math256} from "../../contracts/common/lib/Math256.sol";
+import {MemUtils} from "../../contracts/common/lib/MemUtils.sol";
+import {MinFirstAllocationStrategy} from "../../contracts/common/lib/MinFirstAllocationStrategy.sol";
+import {ILidoLocator} from "../../contracts/common/interfaces/ILidoLocator.sol";
+import {IBurner} from "../../contracts/common/interfaces/IBurner.sol";
+import {SigningKeys} from "./SigningKeys.sol";
+import {Packed64x4} from "../../contracts/0.4.24/lib/Packed64x4.sol";
+import {Versioned} from "../../contracts/0.4.24/utils/Versioned.sol";
 
 interface IStETH {
     function sharesOf(address _account) external view returns (uint256);
@@ -904,23 +904,26 @@
         view
         returns (bytes key, bytes depositSignature, bool used)
     {
+        /*
         bool[] memory keyUses;
         (key, depositSignature, keyUses) = getSigningKeys(_nodeOperatorId, _index, 1);
         used = keyUses[0];
+        */
     }
 
     /// @notice Returns n signing keys of the node operator #`_nodeOperatorId`
     /// @param _nodeOperatorId Node Operator id
-    /// @param _offset Offset of the key, starting with 0
+    /// @param offset Offset of the key, starting with 0
     /// @param _limit Number of keys to return
     /// @return pubkeys Keys concatenated into the bytes batch
     /// @return signatures Signatures concatenated into the bytes batch needed for a deposit_contract.deposit call
     /// @return used Array of flags indicated if the key was used in the staking
-    function getSigningKeys(uint256 _nodeOperatorId, uint256 _offset, uint256 _limit)
+    function getSigningKeys(uint256 _nodeOperatorId, uint256 offset, uint256 _limit)
         public
         view
         returns (bytes memory pubkeys, bytes memory signatures, bool[] memory used)
     {
+        /*
         _onlyExistedNodeOperator(_nodeOperatorId);
 
         Packed64x4.Packed memory signingKeysStats = _loadOperatorSigningKeysStats(_nodeOperatorId);
@@ -934,6 +937,7 @@
             SIGNING_KEYS_MAPPING_NAME.loadKeySigAndAppend(_nodeOperatorId, _offset + i, i, pubkeys, signatures);
             used[i] = (_offset + i) < depositedSigningKeysCount;
         }
+        */
     }
 
     /// @notice Returns the type of the staking module
--- ../contracts/0.4.24/lib/SigningKeys.sol	2023-02-15 09:44:24.460316000 +0200
+++ 	2023-02-16 18:45:36.767814600 +0200
@@ -6,7 +6,7 @@
 
 import {SafeMath} from "@aragon/os/contracts/lib/math/SafeMath.sol";
 import {SafeMath64} from "@aragon/os/contracts/lib/math/SafeMath64.sol";
-import {MemUtils} from "../../common/lib/MemUtils.sol";
+import {MemUtils} from "../../contracts/common/lib/MemUtils.sol";
 
 library SigningKeys {
     using SafeMath for uint256;
@@ -126,13 +126,15 @@
         bytes32 _position,
         uint256 _nodeOperatorId,
         uint256 _keyIndex,
-        uint256 _offset,
+        uint256 offset,
         bytes memory _pubkeys,
         bytes memory _signatures
     ) internal view {
+        /*
         (bytes memory pubkey, bytes memory signature) = _position.loadKeySig(_nodeOperatorId, _keyIndex);
-        MemUtils.copyBytes(pubkey, _pubkeys, _offset.mul(PUBKEY_LENGTH));
-        MemUtils.copyBytes(signature, _signatures, _offset.mul(SIGNATURE_LENGTH));
+        MemUtils.copyBytes(pubkey, _pubkeys, offset.mul(PUBKEY_LENGTH));
+        MemUtils.copyBytes(signature, _signatures, offset.mul(SIGNATURE_LENGTH));
+        */
     }
 
     function loadKeySig(bytes32 _position, uint256 _nodeOperatorId, uint256 _keyIndex)
